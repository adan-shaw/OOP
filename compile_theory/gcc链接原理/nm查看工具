*
*1.nm 工具使用概述:
*
nm 工具主要用来查看静态, 动态链接库里面的'函数存放地址(指针起始地址)' + 函数名.
当然nm 工具也可以轻松列出.o 文件列表
(不能看数据存放的区域, 要看数据存放的区域.bss, .data 之类的, 想看段信息, 请用: objdump )


nm 也同样可以查看'动态装载库'里面的'导出函数列表'中的函数,
只是'动态装载库'比'静态, 动态链接库', 多了一些初始化组建, 主要是用来注册'导出函数的'.

ps: 导出函数也同样用T 表示, 导出函数跟-shared 共享函数的意义差不多.
    不公开的.so 动态装载库的内部函数, 一般用w 表示.

ps2:导出函数一般有前缀_Z 之类的, 但是-shared 共享函数, 一般就是没有前缀, 纯函数名.





*
*2.常用法：[T 表示-shared 共享函数的导出符号, W 表示'弱连接类型'的导出符号]
*
2.1: 查看.so '动态链接库'
nm -D ./make_so.so

优化版1:
nm -D -n ./make_so.so # 根据地址顺序来排列显示, 你可以看到所有T 函数都装载到中间了, T 表示-shared 共享函数.

优化版2:
nm -D -n ./make_so.so -t d # 在优化版1的基础上, 将地址进制从16 进制转换为10 进制标识(很无聊)


0000000000201020 B __bss_start
                 w __cxa_finalize
0000000000201020 D _edata
0000000000201028 B _end

'动态链接库'中装载函数: 主要是装载'动态链接库'用的(执行装载)
000000000000071c T _fini
                 w __gmon_start__

'动态链接库'初始化函数: 主要是'注册函数列表'[装载初始化]
0000000000000590 T _init
                 w _ITM_deregisterTMCloneTable
                 w _ITM_registerTMCloneTable
                 w _Jv_RegisterClasses

函数列表:(T 表示-shared 共享函数, 前后有点杂乱字符, 跳过!)
        所有T 共享函数都是跟在T _init 后面的, 环境准备好就马上准备装载.
        准备好装载就_fini 执行装载并开始<共享函数库> 
00000000000006d0 T _Z3addii # add()
0000000000000709 T _Z3divii # div()
00000000000006f6 T _Z3mulii # mul()
00000000000006e4 T _Z3subii # sub()



2.2: 查看.a '静态链接库'
# nm -s ./obj_lib.a 

# 包含的.o 模块
Archive index:
how2make_lib1test in test.o

# .o 模块包含的T 共享函数
test.o:
0000000000000000 T how2make_lib1test





*
*3.nm 命令的其它选项
*
-a或--debug-syms：显示调试符号. 

-B：等同于--format=bsd, 用来兼容MIPS的nm. 

-C或--demangle：将低级符号名解码(demangle)成用户级名字. 
               这样可以使得C++函数名具有可读性. 

-D或--dynamic：显示动态符号. 该选项仅对于动态目标有意义
              (例如特定类型的共享库). 

-f format：使用format格式输出. format可以选取bsd、sysv或posix, 
          该选项在GNU的nm中有用. 默认为bsd. 

-g或--extern-only：仅显示外部符号. 

-n、-v或--numeric-sort：按符号对应地址的顺序排序, 而非按符号名的字符顺序. 

-p或--no-sort：按目标文件中遇到的符号顺序显示, 不排序. 

-P或--portability：使用POSIX.2标准输出格式代替默认的输出格式. 
                  等同于使用任选项-f posix. 

-s或--print-armap：当列出库中成员的符号时, 包含索引. 
                   索引的内容包含：哪些模块包含哪些名字的映射. 

-r或--reverse-sort：反转排序的顺序(例如, 升序变为降序). 

--size-sort：按大小排列符号顺序. 
            该大小是按照一个符号的值与它下一个符号的值进行计算的. 

-t radix或--radix=radix：使用radix进制显示符号值.radix只能为"d"表示十进制
                         "o"表示八进制或"x"表示十六进制. 

--target=bfdname：指定一个目标代码的格式, 而非使用系统的默认格式. 

-u或--undefined-only：仅显示没有定义的符号(那些外部符号). 

-l或--line-numbers：对每个符号, 使用调试信息来试图找到文件名和行号. 
                   对于已定义的符号, 查找符号地址的行号. 
                   对于未定义符号, 查找指向符号重定位入口的行号. 
                   如果可以找到行号信息, 显示在符号信息之后. 

-V或--version：显示nm的版本号. 
--help：显示nm的任选项. 


